name: Production

on:
  push:
    branches:
      - main # Trigger on push to main branch
  pull_request:
    branches:
      - main # Optional: Run on PRs for validation

env:
  AWS_REGION: ap-southeast-2 # Match your provider.tf default
  APP_NAME: task-management
  STAGE: prod
  READ_CAPACITY: 5
  WRITE_CAPACITY: 5

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
      - name: Terraform Init
        working-directory: ./infrastructure/environments/prod
        run: terraform init
      - name: Terraform Apply (Infrastructure)
        working-directory: ./infrastructure/environments/prod
        run: terraform apply -auto-approve \ 
          -var "app_name=${{ env.APP_NAME }}" \
          -var "stage=${{ env.STAGE }}" \
          -var "aws_region=${{ env.AWS_REGION }}" \
          -var "read_capacity=${{ env.READ_CAPACITY }}" \
          -var "write_capacity=${{ env.WRITE_CAPACITY }}" \
          -target=module.dynamodb \ 
          -target=module.backend_artifacts \ 
          -target=module.frontend_artifacts
        if: github.event_name == 'push'

  backend:
    runs-on: ubuntu-latest
    needs: infrastructure
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Match Lambda runtime

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Backend: Install, Test, Build, and Upload
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Unit Tests
        working-directory: ./backend
        run: npm test

      - name: Build Backend
        working-directory: ./backend
        run: npm run build

      - name: Package Backend
        working-directory: ./backend
        run: npm run package # Assumes this creates lambda-deployment.zip

      - name: Upload Backend ZIP to S3
        run: |
          aws s3 cp ./backend/lambda-deployment.zip s3://${{ env.APP_NAME }}-backend-artifacts-${{ env.STAGE }}/lambda-deployment.zip

      # Terraform: Backend Deployment
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init (Backend)
        working-directory: ./infrastructure/environments/prod
        run: terraform init

      - name: Terraform Plan (Backend)
        working-directory: ./infrastructure/environments/prod
        run: terraform plan -out=tfplan-backend -target=module.backend
        if: github.event_name == 'pull_request'

      - name: Terraform Apply (Backend)
        working-directory: ./infrastructure/environments/prod
        run: terraform apply -auto-approve -target=module.backend
        if: github.event_name == 'push'

    outputs:
      api_url: ${{ steps.terraform.outputs.api_url }} # Note: Requires adjustment, see below

  frontend:
    runs-on: ubuntu-latest
    needs: backend # Ensures backend deploys first (e.g., for API URL dependency)

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Frontend: Install, Build, and Upload
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload Frontend to S3
        run: |
          aws s3 sync ./frontend/out/ s3://${{ env.APP_NAME }}-frontend-artifacts-${{ env.STAGE }}/ --delete

      # Terraform: Frontend Deployment
    #   - name: Setup Terraform
    #     uses: hashicorp/setup-terraform@v3
    #     with:
    #       terraform_version: 1.5.0
    #
    #   - name: Terraform Init (Frontend)
    #     working-directory: ./environments/prod
    #     run: terraform init
    #
    #   - name: Terraform Plan (Frontend)
    #     working-directory: ./environments/prod
    #     run: terraform plan -out=tfplan-frontend -target=module.frontend_artifacts -target=module.frontend
    #     if: github.event_name == 'pull_request'
    #
    #   - name: Terraform Apply (Frontend)
    #     working-directory: ./environments/prod
    #     run: terraform apply -auto-approve -target=module.frontend_artifacts -target=module.frontend
    #     if: github.event_name == 'push'
    #
    #   # Invalidate CloudFront Cache
    #   - name: Get CloudFront Distribution ID
    #     working-directory: ./environments/prod
    #     id: cloudfront
    #     run: |
    #       DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
    #       echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
    #     if: github.event_name == 'push'
    #
    #   - name: Invalidate CloudFront Cache
    #     run: |
    #       aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"
    #     if: github.event_name == 'push'
    #
    # outputs:
    #   cloudfront_url: ${{ steps.terraform.outputs.cloudfront_url }} # Note: Requires adjustment, see below
