name: Production

on:
  push:
    branches:
      - main # Trigger on push to main branch
  pull_request:
    branches:
      - main # Optional: Run on PRs for validation

env:
  AWS_REGION: ap-southeast-2 # Match your provider.tf default
  APP_NAME: task-management
  STAGE: prod
  READ_CAPACITY: 5
  WRITE_CAPACITY: 5
  LAMBDA_ZIP_KEY: lambda-deployment.zip

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Match Lambda runtime

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Backend: Install, Test, Build, and Upload
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Unit Tests
        working-directory: ./backend
        run: npm test

      - name: Build Backend
        working-directory: ./backend
        run: npm run build

      - name: Package Backend
        working-directory: ./backend
        run: npm run package # Assumes this creates lambda-deployment.zip

      - name: Upload Backend ZIP to S3
        run: |
          aws s3 cp ./backend/lambda-deployment.zip s3://${{ env.APP_NAME }}-backend-artifacts-${{ env.STAGE }}/lambda-deployment.zip

    outputs:
      api_url: ${{ steps.terraform.outputs.api_url }} # Note: Requires adjustment, see below

  frontend:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Frontend: Install, Build, and Upload
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
        run: npm ci

      - name: Build Frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
        run: npm run build

      - name: Upload Frontend to S3
        run: |
          aws s3 sync ./frontend/out/ s3://${{ env.APP_NAME }}-frontend-artifacts-${{ env.STAGE }}/ --delete
